# this will install bunch of files for graphql
rails g graphql:install

## Video 10 Query Argument
Run this in postman on route POST : http://localhost:3000/graphql

{
    testField(name: "Bharat")
}

## Video 11 Query Context
graphql_controller :- Entry point for all the requests
If you want to pass the informantion to the all types, just write it in the context that will be accessible to all.

## Video 12 Active Record Queries
    
    1. Created Author model and created some data via seed
    2. Created author_type and specifies fields
    3. Now created a (field) query in query_type.rb 
    4. Run this on postman
        {
            author(id: 1){
                first_name
                lastName
                isAlive
                
            }
        }

## Video 13 Scalar field types

    GraphQLInt A scalar type representing integers.
    GraphQLFloat A scalar type representing floats.
    GraphQLString A scalar type representing strings.
    GraphQLBoolean A scalar type representing booleans.
    GraphQLID A scalar type representing IDs.
    OLD :- not found in latest
    GraphQL::Types::ISO8601DateTime
    GraphQL::Types::ISO8601Date


## Video 15 Active Record fields
    Add a custome field to retrive 
    so it can be done with two ways
    1. create a method to the respected model that will help to be accessible to other also
    2. create a resolver to the Type defination 
    3. Run this via postman
    {
        author(id: 1){
            first_name
            lastName
            isAlive
            fullName
        }
    }

## Video 16 Custom Types
    Created a Cutome Type to retrive data
    Run this via postman
        {
            author(id: 1){
                first_name
                lastName
                isAlive
                fullName
                coordinates {
                    longitude
                    latitude
                }
            }   
        }

## Video 17 Array
    Created Cutome type with Array
    1. first way to get the data from model like creating a method (e.g.) publication_years
    {
        author(id: 1){
            first_name
            lastName
            isAlive
            fullName
            coordinates {
                longitude
                latitude
            }
            publicationYears
        }
    } 

    2. Second to retrive the collection of Authors, Create a Query for that.
       As Author don't belong with anyone to others so the field is added to the root level
    {
        authors{
            fullName
        }
    }

    # we need to make Array like [Types::AuthorType] 
    field :authors, [Types::AuthorType], null: true, description: "Return collection of Authors"
    

##  Video 18 Changing Data via mutation 
    Basic Syntax
    mutation {
        ratePost(postId: 1, stars: 5){

        }
    }


## Video 19 mutation
    There are two ways to use mutation
    1. To create with usual method in Mutation type (NOTE : This is not recommended to handle large number of mutation )

    mutation {
        createAuthor(firstName:"abdul", lastName: "verma", isAlive: true, yob: null){
            id
            fullName
        }
    }

    2. Create a sperate file to store which store in mutations directory that will able to handle the requests
    mutation {
        createAuthor(firstName:"abdul", lastName: "verma", isAlive: true, yob: null){
            id
            fullName
        }
    }


## Video 20 Query Variable (Used with Graphiql Interface)

    QUERY
    mutation createAuthor($firstName: String, $lastName: String, $yob: Int, $isAlive: Boolean ){
        createAuthor(firstName:$firstName, lastName: $lastName, isAlive: $isAlive, yob: $yob){
            id
            fullName
        }
    }

    GraphQL Variable
    {
        "firstName": "abdul",
        "lastName" : "nhi pata",
        "isAlive": true,
        "yob" : null
    }
